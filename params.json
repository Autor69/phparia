{"name":"Phparia","tagline":"PHP ARI API","body":"phparia - PHP ARI API\r\n===\r\n\r\n[![Latest Stable Version](https://img.shields.io/packagist/v/wormling/phparia.svg)](https://packagist.org/packages/wormling/phparia) [![Build Status](http://img.shields.io/travis/wormling/phparia.svg?branch=master)](https://travis-ci.org/wormling/phparia) [![Code Coverage](https://scrutinizer-ci.com/g/wormling/phparia/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/wormling/phparia/?branch=master) [![Scrutinizer Quality Score](http://img.shields.io/scrutinizer/g/wormling/phparia.svg)](https://scrutinizer-ci.com/g/wormling/phparia/) [![Dependency Status](https://www.versioneye.com/user/projects/558fd8a5316338001a000515/badge.svg?style=flat)](https://www.versioneye.com/user/projects/558fd8a5316338001a000515)[![License](https://img.shields.io/github/license/wormling/phparia.svg)](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nFramework for creating Asterisk 12/13 ARI applications.  (https://wiki.asterisk.org/wiki/display/AST/Getting+Started+with+ARI \r\n\r\nFeatures\r\n---\r\n\r\n* Full Asterisk REST Interface support (Tested with 12 and 13)\r\n* Event system at the client and resource level\r\n* Optional basic AMI event/action support\r\n* Verbose for ease of use\r\n* Partial functional tests TODO!\r\n\r\nAvailable via Composer\r\n---\r\nJust add the package \"wormling/phparia\":\r\n\r\n```yaml\r\n    {\r\n        \"require\": {\r\n            \"wormling/phparia\": \"dev-master\"\r\n        }\r\n    }\r\n```\r\n\r\nCreating a stasis application\r\n---\r\n```php\r\n    $ariAddress = 'ws://localhost:8088/ari/events?api_key=username:password&app=stasis_app_name';\r\n\r\n    $logger = new \\Zend\\Log\\Logger();\r\n    $logWriter = new \\Zend\\Log\\Writer\\Stream(\"php://output\");\r\n    $logger->addWriter($logWriter);\r\n    //$filter = new \\Zend\\Log\\Filter\\SuppressFilter(true);\r\n    $filter = new \\Zend\\Log\\Filter\\Priority(\\Zend\\Log\\Logger::NOTICE);\r\n    $logWriter->addFilter($filter);\r\n        \r\n    $this->client = new \\phparia\\Client\\Phparia($logger);\r\n    $this->client->connect($ariAddress);\r\n    $this->client->onStasisStart(function(StasisStart $event) {\r\n        $channel = $event->getChannel();\r\n        $bridge = $this->client->bridges()->createBridge(uniqid(), 'dtmf_events, mixing', 'bridgename');\r\n        $this->client->bridges()->addChannel($bridge->getId(), $channel->getId(), null);\r\n\r\n        ...\r\n    });\r\n\r\n    $this->client->run();\r\n```\r\n\r\nCreating a stasis application and listening for AMI events\r\n---\r\n```php\r\n    $ariAddress = 'ws://localhost:8088/ari/events?api_key=username:password&app=stasis_app_name';\r\n    $amiAddress = 'username:password@localhost:5038';\r\n\r\n    $logger = new \\Zend\\Log\\Logger();\r\n    $logWriter = new \\Zend\\Log\\Writer\\Stream(\"php://output\");\r\n    $logger->addWriter($logWriter);\r\n    //$filter = new \\Zend\\Log\\Filter\\SuppressFilter(true);\r\n    $filter = new \\Zend\\Log\\Filter\\Priority(\\Zend\\Log\\Logger::NOTICE);\r\n    $logWriter->addFilter($filter);\r\n        \r\n    $this->client = new \\phparia\\Client\\Phparia($logger);\r\n    $this->client->connect($ariAddress, $amiAddress);\r\n    $this->client->onStasisStart(function(StasisStart $event) {\r\n        $channel = $event->getChannel();\r\n        $bridge = $this->client->bridges()->createBridge(uniqid(), 'dtmf_events, mixing', 'bridgename');\r\n        $this->client->bridges()->addChannel($bridge->getId(), $channel->getId(), null);\r\n\r\n        $this->client->getWsClient()->on('SomeAMIEventName', function($event) {\r\n            ...\r\n        });\r\n\r\n        ...\r\n    });\r\n\r\n    $this->client->run();\r\n```\r\n\r\nDocumentation\r\n---\r\nYou will find wrappers for (https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+ARI) in the Api folder.\r\n\r\nYou will find wrappers for (https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+REST+Data+Models) in the Resources and Events folders.\r\n\r\nExamples\r\n---\r\n(https://github.com/wormling/phparia/tree/master/src/wormling/phparia/Examples)\r\n\r\n(https://github.com/wormling/phparia/tree/master/src/wormling/phparia/Tests/Functional)\r\n\r\nLicense\r\n---\r\nApache 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\r\n","google":"UA-64558004-1","note":"Don't delete this file! It's used internally to help with page regeneration."}